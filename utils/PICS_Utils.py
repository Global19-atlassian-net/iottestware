"""
This script extracts the PICS Selection from a given TDL-TO catalog and outputs
a TTCN-3 select-statement
"""
import sys, os
import re

def Main():
    sourceFile = sys.argv[1]
    input = open(sourceFile, "r")

    raw_pics_dict = {}
    line = True

    # read and structure the input
    while line:
        line = input.readline()
        if "Test Purpose" in line:
            element = readTestPurpose(input)

            # merge the new element into the raw_pics_dict
            for k, v in element.items():
                if k in raw_pics_dict:
                    raw_pics_dict[k] = raw_pics_dict[k] + v
                else:
                    raw_pics_dict[k] = v

    # output the select-statement
    print("/**")
    print(" * Note: Do not change this part!")
    print(" * This code is automatically generated by " + sys.argv[0] + " from " + os.path.basename(sourceFile))
    print(" */")
    print("select(s)\n{")
    for key, values in raw_pics_dict.items():
        print("\tcase(" + key + ")\n\t{")
        print("\t\tlog(\"" + key + "\");")
        for value in values:
            print("\t\texecute(" + value.replace("TP", "TC").upper() + "());")
        print("\t}")
    print("}")

    print("\nDONE")

def readTestPurpose(input):
    tp_Id = ""  # Test Purpose ID
    pics = []   # PICS selections
    ret = dict()    # the return object

    # did we reach the wanted section in the Test Purpose?
    reached = False

    # move until TP Id: required for referencing
    while not reached:
        line = input.readline()
        if "TP Id" in line:
            reached = True
            tp_Id = line.split()[2]   # get only the 3rd element

    # move until PICS Selection
    reached = False
    while not reached:
        line = input.readline()
        if "PICS Selection" in line:
            reached = True
            pics = filterPICS(line)

            # iterate over PICS and add the TP accordingly to dict
            for p in pics:
                key = str(p)
                if key in ret.keys():
                    ret[key] = ret[key].append(tp_Id)
                else:
                    #ret.update({key: [tp_Id]})
                    ret[key] = [tp_Id]

    return ret

def filterPICS(pics_line):
    pics = []
    # split the line into single words
    # cut away first 2 occurences (PICS Selection)
    elements = pics_line.split()[2::]
    for e in elements:
        if e != "and" and e != "or":
            pics.append(e)

    return pics

if __name__ == '__main__':
    if len(sys.argv) == 2:
        if os.path.isfile(sys.argv[1]):
            Main()
        else:
            print("The provided parameter " + sys.argv[1] + " is not a file")
    else:
        print("Please provide a source file as parameter")
